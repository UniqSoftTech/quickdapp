Analyze the following protocol contract information, including full source codes, and generate a comprehensive, linked representation of the protocol's structure and functionality:

{INPUT_JSON}

Your task is to:
1. Analyze all contract ABIs and source codes to identify public and external functions, state variables, events, and internal logic.
2. Determine relationships between contracts based on inheritance, function calls, and other interactions visible in the source code.
3. Identify how contracts interact with the listed tokens and any additional tokens found in the source code or ABIs.
4. Recognize common DeFi patterns such as lending, borrowing, staking, or swapping by analyzing the contract logic.
5. Fetch basic information (name, symbol, decimals) for all tokens, including those not initially listed but referenced in contracts.
6. Identify any security measures, access controls, or upgradeability patterns in the contracts.
7. Detect any oracle usage or external data dependencies.
8. Analyze the overall protocol architecture and key components based on the contract interactions and logic.
9. Create a JSON output that includes:
   - Detailed information about each contract, its functions, state variables, and key logic flows
   - Token details
   - Relationships between contracts and tokens
   - Protocol-specific features, patterns, or unique aspects identified
   - Security considerations or potential areas of concern
   - A high-level overview of the protocol's architecture and main components

The output should be structured to allow easy generation of a dynamic user interface, facilitate complex multi-contract operations, and provide insights into the protocol's functionality and security aspects.

Provide your analysis and the resulting JSON output, ensuring it's general enough to work for various DeFi protocols like Uniswap, AAVE, Maker, or Lido, while also capturing the unique aspects of this specific protocol.