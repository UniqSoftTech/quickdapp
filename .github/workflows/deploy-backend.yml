name: Deploy Backend to AWS

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  PORT: ${{ secrets.BACKEND_PORT }}
  BLOCKSCOUT_URL: ${{ secrets.BLOCKSCOUT_URL }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Generate deployment package
      run: |
        cd backend
        zip -r deploy.zip . -x "*.git*" "node_modules/*"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Check AWS S3 permissions
      run: |
        aws s3 ls
        if [ $? -ne 0 ]; then
          echo "Error: Unable to list S3 buckets. Please check AWS permissions."
          exit 1
        fi

    - name: Check if Elastic Beanstalk application exists
      run: |
        if ! aws elasticbeanstalk describe-applications --application-names quickdapp > /dev/null 2>&1; then
          echo "Application 'quickdapp' not found. Creating it..."
          aws elasticbeanstalk create-application --application-name quickdapp
        else
          echo "Application 'quickdapp' already exists."
        fi

    - name: Check and create Elastic Beanstalk environment
      run: |
        if [ -z "$(aws elasticbeanstalk describe-environments --environment-names Quickdapp-env --application-name quickdapp --query 'Environments[0].EnvironmentName' --output text)" ]; then
          echo "Environment 'Quickdapp-env' not found. Creating it..."
          aws elasticbeanstalk create-environment \
            --application-name quickdapp \
            --environment-name Quickdapp-env \
            --solution-stack-name "64bit Amazon Linux 2 v5.8.0 running Node.js 20" \
            --option-settings \
              Namespace=aws:elasticbeanstalk:application:environment,OptionName=PORT,Value=${{ env.PORT }} \
              Namespace=aws:elasticbeanstalk:application:environment,OptionName=BLOCKSCOUT_URL,Value=${{ env.BLOCKSCOUT_URL }}
          
          # Wait for the environment to be ready
          echo "Waiting for environment to be ready..."
          aws elasticbeanstalk wait environment-exists --environment-names Quickdapp-env --application-name quickdapp
          
          # Check if environment creation was successful
          if [ $? -ne 0 ]; then
            echo "Failed to create environment. Check AWS console for more details."
            exit 1
          fi
          
          echo "Environment created successfully."
        else
          echo "Environment 'Quickdapp-env' already exists."
        fi

    - name: Upload deployment package to S3
      run: |
        aws s3 cp backend/deploy.zip s3://${{ secrets.AWS_S3_BUCKET }}/backend/deploy.zip

    - name: Deploy to AWS Elastic Beanstalk
      run: |
        # Create a new application version
        aws elasticbeanstalk create-application-version \
          --application-name quickdapp \
          --version-label ${{ github.sha }} \
          --source-bundle S3Bucket="${{ secrets.AWS_S3_BUCKET }}",S3Key="backend/deploy.zip"

        # Update the environment with the new version
        aws elasticbeanstalk update-environment \
          --application-name quickdapp \
          --environment-name Quickdapp-env \
          --version-label ${{ github.sha }}

        # Wait for the deployment to complete
        echo "Waiting for deployment to complete..."
        aws elasticbeanstalk wait environment-updated \
          --application-name quickdapp \
          --environment-name Quickdapp-env

        # Check the health status of the environment
        HEALTH_STATUS=$(aws elasticbeanstalk describe-environments \
          --environment-names Quickdapp-env \
          --query "Environments[0].Health" \
          --output text)

        if [ "$HEALTH_STATUS" != "Green" ]; then
          echo "Deployment failed. Environment health status: $HEALTH_STATUS"
          echo "Recent events:"
          aws elasticbeanstalk describe-events --environment-name Quickdapp-env --max-items 10
          exit 1
        fi

        echo "Deployment completed successfully."

    - name: Check deployment status
      if: steps.deploy.outcome == 'failure'
      run: |
        echo "Deployment failed. Checking Elastic Beanstalk logs..."
        aws elasticbeanstalk describe-events --environment-name Quickdapp-env --output text
        exit 1