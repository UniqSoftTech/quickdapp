name: Backend CI/CD

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: quickdapp-api
  ECS_SERVICE: quickdapp-api-svc
  ECS_CLUSTER: QuickDapp
  ECS_TASK_DEFINITION: backend/task-definition-backend.json
  CONTAINER_NAME: quickdapp-api

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # - name: Create .env file
      #   run: |
      #     cat << EOF > .env
      #     DEV_JWT_SECRET=
      #     NODE_ENV='development'
      #     PORT=5001
      #     DB_NAME=defaultdb
      #     DB_HOST=optima-dev-do-user-16332780-0.a.db.ondigitalocean.com
      #     DB_PORT=25060
      #     ANALYZE_API_URL=https://2hs9nlgv18.execute-api.eu-north-1.amazonaws.com/dev
      #     DB_USER=${{ secrets.DB_USER }}
      #     DB_PASS=${{ secrets.DB_PASS }}
      #     ONCHAIN_PRIVATE_KEY=${{ secrets.ONCHAIN_PRIVATE_KEY }}
      #     INFURA_URL=${{ secrets.INFURA_URL }}
      #     CONTRACT_ADDRESS=${{ secrets.CONTRACT_ADDRESS }}
      #     WALLET_ADDRESS=${{ secrets.WALLET_ADDRESS }}
      #     CHAIN_ID=${{ secrets.CHAIN_ID }}
      #     MAINNET_RPC=${{ secrets.MAINNET_RPC }}
      #     EOF

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image to Amazon ECR
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        with:
          context: ./backend
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Clean up Docker
        run: |
          docker system prune -af